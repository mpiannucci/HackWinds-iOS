// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   hackwinds/v1
// Description:
//   This is an API

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRHackwinds_ModelCameraMessagesCameraMessage;
@class GTLRHackwinds_ModelCameraMessagesCameraRegionMessage;
@class GTLRHackwinds_ModelForecastMessagesDataMessage;
@class GTLRHackwinds_ModelForecastMessagesLocationMessage;
@class GTLRHackwinds_ModelForecastMessagesMeasurementLabelMessage;
@class GTLRHackwinds_ModelForecastMessagesNOAAModelMessage;
@class GTLRHackwinds_ModelForecastMessagesSurfForecastDayMessage;
@class GTLRHackwinds_ModelForecastMessagesSurfForecastSummaryMessage;
@class GTLRHackwinds_ModelForecastMessagesSwellMessage;
@class GTLRHackwinds_ModelForecastMessagesUnitLabelMessage;
@class GTLRHackwinds_ModelForecastMessagesWaveSpectraMessage;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRHackwinds_ModelCameraMessagesCameraMessage.refreshMethod

/** Value: "NONE" */
GTLR_EXTERN NSString * const kGTLRHackwinds_ModelCameraMessagesCameraMessage_RefreshMethod_None;
/** Value: "SEQUENTIAL" */
GTLR_EXTERN NSString * const kGTLRHackwinds_ModelCameraMessagesCameraMessage_RefreshMethod_Sequential;
/** Value: "STATIC" */
GTLR_EXTERN NSString * const kGTLRHackwinds_ModelCameraMessagesCameraMessage_RefreshMethod_Static;

// ----------------------------------------------------------------------------
// GTLRHackwinds_ModelForecastMessagesMeasurementLabelMessage.measurement

/** Value: "DIRECTION" */
GTLR_EXTERN NSString * const kGTLRHackwinds_ModelForecastMessagesMeasurementLabelMessage_Measurement_Direction;
/** Value: "LENGTH" */
GTLR_EXTERN NSString * const kGTLRHackwinds_ModelForecastMessagesMeasurementLabelMessage_Measurement_Length;
/** Value: "PRESSURE" */
GTLR_EXTERN NSString * const kGTLRHackwinds_ModelForecastMessagesMeasurementLabelMessage_Measurement_Pressure;
/** Value: "SPEED" */
GTLR_EXTERN NSString * const kGTLRHackwinds_ModelForecastMessagesMeasurementLabelMessage_Measurement_Speed;
/** Value: "TEMPERATURE" */
GTLR_EXTERN NSString * const kGTLRHackwinds_ModelForecastMessagesMeasurementLabelMessage_Measurement_Temperature;
/** Value: "VISIBILITY" */
GTLR_EXTERN NSString * const kGTLRHackwinds_ModelForecastMessagesMeasurementLabelMessage_Measurement_Visibility;

// ----------------------------------------------------------------------------
// GTLRHackwinds_ModelForecastMessagesSurfForecastSummaryMessage.conditions

/** Value: "DECENT" */
GTLR_EXTERN NSString * const kGTLRHackwinds_ModelForecastMessagesSurfForecastSummaryMessage_Conditions_Decent;
/** Value: "EPIC" */
GTLR_EXTERN NSString * const kGTLRHackwinds_ModelForecastMessagesSurfForecastSummaryMessage_Conditions_Epic;
/** Value: "FLAT" */
GTLR_EXTERN NSString * const kGTLRHackwinds_ModelForecastMessagesSurfForecastSummaryMessage_Conditions_Flat;
/** Value: "GOOD" */
GTLR_EXTERN NSString * const kGTLRHackwinds_ModelForecastMessagesSurfForecastSummaryMessage_Conditions_Good;
/** Value: "POOR" */
GTLR_EXTERN NSString * const kGTLRHackwinds_ModelForecastMessagesSurfForecastSummaryMessage_Conditions_Poor;

// ----------------------------------------------------------------------------
// GTLRHackwinds_ModelForecastMessagesUnitLabelMessage.unit

/** Value: "ENGLISH" */
GTLR_EXTERN NSString * const kGTLRHackwinds_ModelForecastMessagesUnitLabelMessage_Unit_English;
/** Value: "METRIC" */
GTLR_EXTERN NSString * const kGTLRHackwinds_ModelForecastMessagesUnitLabelMessage_Unit_Metric;

/**
 *  GTLRHackwinds_ModelCameraMessagesCameraLocationsMessage
 */
@interface GTLRHackwinds_ModelCameraMessagesCameraLocationsMessage : GTLRObject

@property(nonatomic, strong, nullable) NSArray<GTLRHackwinds_ModelCameraMessagesCameraRegionMessage *> *cameraLocations;

@end


/**
 *  GTLRHackwinds_ModelCameraMessagesCameraMessage
 */
@interface GTLRHackwinds_ModelCameraMessagesCameraMessage : GTLRObject

@property(nonatomic, copy, nullable) NSString *imageUrl;
@property(nonatomic, copy, nullable) NSString *info;
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  premium
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *premium;

/**
 *  refreshInterval
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *refreshInterval;

/**
 *  refreshMethod
 *
 *  Likely values:
 *    @arg @c kGTLRHackwinds_ModelCameraMessagesCameraMessage_RefreshMethod_None
 *        Value "NONE"
 *    @arg @c kGTLRHackwinds_ModelCameraMessagesCameraMessage_RefreshMethod_Sequential
 *        Value "SEQUENTIAL"
 *    @arg @c kGTLRHackwinds_ModelCameraMessagesCameraMessage_RefreshMethod_Static
 *        Value "STATIC"
 */
@property(nonatomic, copy, nullable) NSString *refreshMethod;

/**
 *  refreshable
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *refreshable;

@property(nonatomic, copy, nullable) NSString *videoUrl;
@property(nonatomic, copy, nullable) NSString *webUrl;

@end


/**
 *  GTLRHackwinds_ModelCameraMessagesCameraRegionMessage
 */
@interface GTLRHackwinds_ModelCameraMessagesCameraRegionMessage : GTLRObject

@property(nonatomic, strong, nullable) NSArray<GTLRHackwinds_ModelCameraMessagesCameraMessage *> *cameras;
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  GTLRHackwinds_ModelForecastMessagesDataMessage
 */
@interface GTLRHackwinds_ModelForecastMessagesDataMessage : GTLRObject

/**
 *  airTemperature
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *airTemperature;

/**
 *  averagePeriod
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *averagePeriod;

@property(nonatomic, strong, nullable) GTLRDateTime *date;

/**
 *  dewpointTemperature
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *dewpointTemperature;

@property(nonatomic, copy, nullable) NSString *directionSpectraPlot;
@property(nonatomic, copy, nullable) NSString *energySpectraPlot;

/**
 *  maximumBreakingHeight
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maximumBreakingHeight;

/**
 *  minimumBreakingHeight
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minimumBreakingHeight;

/**
 *  pressure
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pressure;

/**
 *  pressureTendency
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pressureTendency;

@property(nonatomic, copy, nullable) NSString *steepness;
@property(nonatomic, strong, nullable) NSArray<GTLRHackwinds_ModelForecastMessagesSwellMessage *> *swellComponents;
@property(nonatomic, strong, nullable) GTLRHackwinds_ModelForecastMessagesUnitLabelMessage *unit;

/**
 *  waterLevel
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *waterLevel;

/**
 *  waterTemperature
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *waterTemperature;

@property(nonatomic, strong, nullable) GTLRHackwinds_ModelForecastMessagesWaveSpectraMessage *waveSpectra;
@property(nonatomic, strong, nullable) GTLRHackwinds_ModelForecastMessagesSwellMessage *waveSummary;
@property(nonatomic, copy, nullable) NSString *windCompassDirection;

/**
 *  windDirection
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *windDirection;

/**
 *  windGust
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *windGust;

/**
 *  windSpeed
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *windSpeed;

@end


/**
 *  GTLRHackwinds_ModelForecastMessagesLocationMessage
 */
@interface GTLRHackwinds_ModelForecastMessagesLocationMessage : GTLRObject

/**
 *  altitude
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *altitude;

/**
 *  latitude
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *latitude;

/**
 *  longitude
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *longitude;

@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  GTLRHackwinds_ModelForecastMessagesMeasurementLabelMessage
 */
@interface GTLRHackwinds_ModelForecastMessagesMeasurementLabelMessage : GTLRObject

@property(nonatomic, copy, nullable) NSString *label;

/**
 *  measurement
 *
 *  Likely values:
 *    @arg @c kGTLRHackwinds_ModelForecastMessagesMeasurementLabelMessage_Measurement_Direction
 *        Value "DIRECTION"
 *    @arg @c kGTLRHackwinds_ModelForecastMessagesMeasurementLabelMessage_Measurement_Length
 *        Value "LENGTH"
 *    @arg @c kGTLRHackwinds_ModelForecastMessagesMeasurementLabelMessage_Measurement_Pressure
 *        Value "PRESSURE"
 *    @arg @c kGTLRHackwinds_ModelForecastMessagesMeasurementLabelMessage_Measurement_Speed
 *        Value "SPEED"
 *    @arg @c kGTLRHackwinds_ModelForecastMessagesMeasurementLabelMessage_Measurement_Temperature
 *        Value "TEMPERATURE"
 *    @arg @c kGTLRHackwinds_ModelForecastMessagesMeasurementLabelMessage_Measurement_Visibility
 *        Value "VISIBILITY"
 */
@property(nonatomic, copy, nullable) NSString *measurement;

@end


/**
 *  GTLRHackwinds_ModelForecastMessagesNOAAModelMessage
 */
@interface GTLRHackwinds_ModelForecastMessagesNOAAModelMessage : GTLRObject

/**
 *  descriptionProperty
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

@property(nonatomic, strong, nullable) GTLRDateTime *modelRun;
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  GTLRHackwinds_ModelForecastMessagesSurfForecastDayMessage
 */
@interface GTLRHackwinds_ModelForecastMessagesSurfForecastDayMessage : GTLRObject

@property(nonatomic, strong, nullable) NSArray<GTLRHackwinds_ModelForecastMessagesDataMessage *> *data;
@property(nonatomic, strong, nullable) GTLRDateTime *date;
@property(nonatomic, strong, nullable) NSArray<GTLRHackwinds_ModelForecastMessagesSurfForecastSummaryMessage *> *summary;

@end


/**
 *  GTLRHackwinds_ModelForecastMessagesSurfForecastMessage
 */
@interface GTLRHackwinds_ModelForecastMessagesSurfForecastMessage : GTLRObject

@property(nonatomic, strong, nullable) GTLRDateTime *fetchDate;
@property(nonatomic, strong, nullable) NSArray<GTLRHackwinds_ModelForecastMessagesSurfForecastDayMessage *> *forecast;
@property(nonatomic, strong, nullable) GTLRHackwinds_ModelForecastMessagesLocationMessage *forecastLocation;
@property(nonatomic, strong, nullable) GTLRHackwinds_ModelForecastMessagesLocationMessage *swellLocation;
@property(nonatomic, strong, nullable) GTLRHackwinds_ModelForecastMessagesNOAAModelMessage *waveModelInfo;
@property(nonatomic, strong, nullable) GTLRHackwinds_ModelForecastMessagesNOAAModelMessage *weatherModelInfo;
@property(nonatomic, strong, nullable) GTLRHackwinds_ModelForecastMessagesLocationMessage *windLocation;

@end


/**
 *  GTLRHackwinds_ModelForecastMessagesSurfForecastSummaryMessage
 */
@interface GTLRHackwinds_ModelForecastMessagesSurfForecastSummaryMessage : GTLRObject

/**
 *  conditions
 *
 *  Likely values:
 *    @arg @c kGTLRHackwinds_ModelForecastMessagesSurfForecastSummaryMessage_Conditions_Decent
 *        Value "DECENT"
 *    @arg @c kGTLRHackwinds_ModelForecastMessagesSurfForecastSummaryMessage_Conditions_Epic
 *        Value "EPIC"
 *    @arg @c kGTLRHackwinds_ModelForecastMessagesSurfForecastSummaryMessage_Conditions_Flat
 *        Value "FLAT"
 *    @arg @c kGTLRHackwinds_ModelForecastMessagesSurfForecastSummaryMessage_Conditions_Good
 *        Value "GOOD"
 *    @arg @c kGTLRHackwinds_ModelForecastMessagesSurfForecastSummaryMessage_Conditions_Poor
 *        Value "POOR"
 */
@property(nonatomic, copy, nullable) NSString *conditions;

@property(nonatomic, copy, nullable) NSString *summary;
@property(nonatomic, copy, nullable) NSString *timeOfDay;

@end


/**
 *  GTLRHackwinds_ModelForecastMessagesSwellMessage
 */
@interface GTLRHackwinds_ModelForecastMessagesSwellMessage : GTLRObject

@property(nonatomic, copy, nullable) NSString *compassDirection;

/**
 *  direction
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *direction;

/**
 *  period
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *period;

@property(nonatomic, strong, nullable) GTLRHackwinds_ModelForecastMessagesUnitLabelMessage *unit;

/**
 *  waveHeight
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *waveHeight;

@end


/**
 *  GTLRHackwinds_ModelForecastMessagesUnitLabelMessage
 */
@interface GTLRHackwinds_ModelForecastMessagesUnitLabelMessage : GTLRObject

@property(nonatomic, strong, nullable) NSArray<GTLRHackwinds_ModelForecastMessagesMeasurementLabelMessage *> *measurements;

/**
 *  unit
 *
 *  Likely values:
 *    @arg @c kGTLRHackwinds_ModelForecastMessagesUnitLabelMessage_Unit_English
 *        Value "ENGLISH"
 *    @arg @c kGTLRHackwinds_ModelForecastMessagesUnitLabelMessage_Unit_Metric
 *        Value "METRIC"
 */
@property(nonatomic, copy, nullable) NSString *unit;

@end


/**
 *  GTLRHackwinds_ModelForecastMessagesWaveSpectraMessage
 */
@interface GTLRHackwinds_ModelForecastMessagesWaveSpectraMessage : GTLRObject

/**
 *  angle
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *angle;

/**
 *  energy
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *energy;

/**
 *  frequency
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *frequency;

/**
 *  seperationFrequency
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *seperationFrequency;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
