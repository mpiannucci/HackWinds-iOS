// Objective-C API for talking to github.com/mpiannucci/HackWinds-Data Go package.
//   gobind -lang=objc github.com/mpiannucci/HackWinds-Data
//
// File is generated by gobind. Do not edit.

#ifndef __GoHackwindsdata_H__
#define __GoHackwindsdata_H__

#include <Foundation/Foundation.h>

@class GoHackwindsdataBuoy;

@class GoHackwindsdataBuoyModel;

@class GoHackwindsdataCamera;

@class GoHackwindsdataCameraModel;

@class GoHackwindsdataCondition;

@class GoHackwindsdataForecast;

@class GoHackwindsdataForecastModel;

@class GoHackwindsdataTide;

@class GoHackwindsdataTideModel;

@interface GoHackwindsdataBuoy : NSObject {
}
@property(strong, readonly) id ref;

- (id)initWithRef:(id)ref;
- (NSString*)Time;
- (void)setTime:(NSString*)v;
- (NSString*)WaveHeight;
- (void)setWaveHeight:(NSString*)v;
- (NSString*)DominantPeriod;
- (void)setDominantPeriod:(NSString*)v;
- (NSString*)SwellDirection;
- (void)setSwellDirection:(NSString*)v;
- (NSString*)WaterTemperature;
- (void)setWaterTemperature:(NSString*)v;
@end

@interface GoHackwindsdataBuoyModel : NSObject {
}
@property(strong, readonly) id ref;

- (id)initWithRef:(id)ref;
- (int)BlockIslandDataCount;
- (void)setBlockIslandDataCount:(int)v;
- (int)MontaukDataCount;
- (void)setMontaukDataCount:(int)v;
- (BOOL)FetchBlockIslandBuoyData;
- (BOOL)FetchMontaukBuoyData;
- (GoHackwindsdataBuoy*)GetBlockIslandBuoyAtIndex:(int)index;
- (int)GetBlockIslandMaxWaveHeight;
- (int)GetBlockIslandMinWaveHeight;
- (GoHackwindsdataBuoy*)GetMontaukBuoyAtIndex:(int)index;
- (int)GetMontaukMaxWaveHeight;
- (int)GetMontaukMinWaveHeight;
- (void)ResetBuoyData;
@end

@interface GoHackwindsdataCamera : NSObject {
}
@property(strong, readonly) id ref;

- (id)initWithRef:(id)ref;
- (NSString*)ImageURL;
- (void)setImageURL:(NSString*)v;
- (NSString*)VideoURL;
- (void)setVideoURL:(NSString*)v;
- (NSString*)Info;
- (void)setInfo:(NSString*)v;
@end

@interface GoHackwindsdataCameraModel : NSObject {
}
@property(strong, readonly) id ref;

- (id)initWithRef:(id)ref;
- (BOOL)FetchCameraURLs;
- (BOOL)ForceFetchCameraURLs;
@end

@interface GoHackwindsdataCondition : NSObject {
}
@property(strong, readonly) id ref;

- (id)initWithRef:(id)ref;
- (GoHackwindsdataForecast*)Forecast;
- (void)setForecast:(GoHackwindsdataForecast*)v;
- (double)WindDeg;
- (void)setWindDeg:(double)v;
- (double)SwellHeight;
- (void)setSwellHeight:(double)v;
- (int)SwellPeriod;
- (void)setSwellPeriod:(int)v;
- (NSString*)SwellDirection;
- (void)setSwellDirection:(NSString*)v;
- (NSString*)SwellChartURL;
- (void)setSwellChartURL:(NSString*)v;
- (NSString*)WindChartURL;
- (void)setWindChartURL:(NSString*)v;
- (NSString*)PeriodChartURL;
- (void)setPeriodChartURL:(NSString*)v;
@end

@interface GoHackwindsdataForecast : NSObject {
}
@property(strong, readonly) id ref;

- (id)initWithRef:(id)ref;
- (NSString*)Date;
- (void)setDate:(NSString*)v;
- (int)MinBreakingHeight;
- (void)setMinBreakingHeight:(int)v;
- (int)MaxBreakingHeight;
- (void)setMaxBreakingHeight:(int)v;
- (int)WindSpeed;
- (void)setWindSpeed:(int)v;
- (NSString*)WindDirection;
- (void)setWindDirection:(NSString*)v;
@end

@interface GoHackwindsdataForecastModel : NSObject {
}
@property(strong, readonly) id ref;

- (id)initWithRef:(id)ref;
- (NSString*)ForecastSite;
- (void)setForecastSite:(NSString*)v;
- (NSString*)ForecastLocation;
- (void)setForecastLocation:(NSString*)v;
- (int)ForecastCount;
- (void)setForecastCount:(int)v;
- (int)ConditionCount;
- (void)setConditionCount:(int)v;
- (void)ChangeForecastLocation:(NSString*)location;
- (BOOL)FetchForecastData;
- (GoHackwindsdataCondition*)GetCondition:(int)day index:(int)index;
- (GoHackwindsdataForecast*)GetForecast:(int)day index:(int)index;
- (void)ResetForecastData;
@end

@interface GoHackwindsdataTide : NSObject {
}
@property(strong, readonly) id ref;

- (id)initWithRef:(id)ref;
- (NSString*)Time;
- (void)setTime:(NSString*)v;
- (NSString*)EventType;
- (void)setEventType:(NSString*)v;
- (NSString*)Height;
- (void)setHeight:(NSString*)v;
- (BOOL)IsHighTide;
- (BOOL)IsLowTide;
- (BOOL)IsSolarEvent;
- (BOOL)IsSunrise;
- (BOOL)IsSunset;
- (BOOL)IsTidalEvent;
- (BOOL)IsValidEvent;
@end

@interface GoHackwindsdataTideModel : NSObject {
}
@property(strong, readonly) id ref;

- (id)initWithRef:(id)ref;
- (int)TideCount;
- (void)setTideCount:(int)v;
- (BOOL)FetchTideData;
- (GoHackwindsdataTide*)GetTideEventForIndex:(int)index;
- (void)ResetTideData;
@end

FOUNDATION_EXPORT GoHackwindsdataBuoy* GoHackwindsdataNewBuoy(NSString* time, NSString* waveHeight, NSString* dominantPeriod, NSString* swellDirection, NSString* waterTemperature);

FOUNDATION_EXPORT GoHackwindsdataBuoyModel* GoHackwindsdataNewBuoyModel();

FOUNDATION_EXPORT GoHackwindsdataCamera* GoHackwindsdataNewCamera(NSString* imageURL, NSString* info);

FOUNDATION_EXPORT GoHackwindsdataCameraModel* GoHackwindsdataNewCameraModel();

FOUNDATION_EXPORT GoHackwindsdataCamera* GoHackwindsdataNewCameraWithVideo(NSString* imageURL, NSString* videoURL, NSString* info);

FOUNDATION_EXPORT GoHackwindsdataCondition* GoHackwindsdataNewCondition(GoHackwindsdataForecast* forecast, double windDeg, double swellHeight, int swellPeriod, NSString* swellDirection, NSString* swellChartURL, NSString* windChartURL, NSString* periodChartURL);

FOUNDATION_EXPORT GoHackwindsdataForecast* GoHackwindsdataNewForecast(NSString* date, int minBreakHeight, int maxBreakHeight, int windSpeed, NSString* windDirection);

FOUNDATION_EXPORT GoHackwindsdataForecastModel* GoHackwindsdataNewForecastModel();

FOUNDATION_EXPORT GoHackwindsdataTide* GoHackwindsdataNewTide(NSString* time, NSString* eventType, NSString* height);

FOUNDATION_EXPORT GoHackwindsdataTideModel* GoHackwindsdataNewTideModel();

FOUNDATION_EXPORT BOOL GoHackwindsdataValidateTideEvent(NSString* event);

#endif
